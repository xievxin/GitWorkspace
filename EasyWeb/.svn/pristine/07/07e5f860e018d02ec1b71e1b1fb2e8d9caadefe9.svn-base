package com.xx.easyweb;

import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RemoteViews;
import android.widget.TextView;

import com.xx.model.ModelWebOperator;
import com.xx.model.ServiceBean;
import com.xx.model.servicebean.BackkeyServiceBean;
import com.xx.model.servicebean.FinishServiceBean;
import com.xx.model.servicebean.RemoteViewServiceBean;
import com.xx.model.servicebean.TitleServiceBean;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;

import java.lang.reflect.Constructor;

/**
 * Created by xievxin on 2017/11/8.
 */

public class WebActivity extends FragmentActivity implements View.OnClickListener {

    private static final String TAG = "WebActivity";
    public static final String WEB_ACTION = "com.ckjr.webprocess.WebActivity";

    public static final String WEB_CLASS_NAME = "webClassName";

    public static final String LOAD_TYPE = "type";
    public static final int TYPE_LOAD_URL = 0;
    public static final int TYPE_POST_URL = 1;
    public static final int TYPE_LOAD_DATA = 2;
    private int type = -1;

    final H mH = new H();

    /**
     * false：返回键都失效
     */
    private boolean backable = true;
    View containerLayout;
    TextView titleTv;
    View backView;
    View closeView;
    EasyWebview webView;
    EasyOperator mEasyOperator;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        WebService.registerOnWenListener(onWebListener);
        super.onCreate(savedInstanceState);
        setContentView(R.layout.webcontainer);

        initStatusBar();
        initView();
        invokeAndAddWebview();
        invokeEasyOperator();

        Intent intent = getIntent();
        switch (type = intent.getIntExtra(LOAD_TYPE, -1)) {
            case TYPE_LOAD_URL:
                handleLoadUrl(intent.getStringExtra("url"));
                break;
            case TYPE_POST_URL:
                handlePostUrl(intent.getStringExtra("url"), intent.getByteArrayExtra("bytes"));
                break;
            case TYPE_LOAD_DATA:
                handleLoadData(intent.getStringExtra("data"), intent.getStringExtra("mimeType"), intent.getStringExtra("encoding"));
                break;
            default:break;
        }

        if(!EventBus.getDefault().isRegistered(this)) {
            EventBus.getDefault().register(this);
        }
    }

    /**
     * 状态栏
     */
    private void initStatusBar() {
        WebStyleManager.setAppStyle(this);

        if (android.os.Build.VERSION.SDK_INT >= 21) {
//            contentView.setFitsSystemWindows(true); // already setted
            SystemBarTintManager tintManager = new SystemBarTintManager(this);
            tintManager.setStatusBarTintEnabled(true);
            tintManager.setStatusBarTintColor(Color.WHITE);
        }
    }

    /**
     * 控件初始化
     */
    private void initView() {
        containerLayout = findViewById(R.id.container);
        titleTv = (TextView) findViewById(R.id.title);
        backView = findViewById(R.id.back);
        closeView = findViewById(R.id.closeAll);

        titleTv.setText(getIntent().getStringExtra("title"));
        backView.setOnClickListener(this);
        closeView.setOnClickListener(this);
    }

    private void invokeAndAddWebview() {
        String webClassName = getIntent().getStringExtra(WEB_CLASS_NAME);
        Log.i(TAG, "invokeAndAddWebview: "+webClassName);
        try {
            Class webCls = Class.forName(webClassName);
            Constructor con = webCls.getConstructor(Context.class);
            webView = (EasyWebview) con.newInstance(this);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (webView == null) throw new RuntimeException("webView init err:" + webClassName);
        }

        LinearLayout linearLayout = (LinearLayout) findViewById(R.id.container);
        linearLayout.addView(webView, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
    }

    private void invokeEasyOperator() {
        try {
            Class webCls = Class.forName(WebService.easyOperatorClassName);
            mEasyOperator = (EasyOperator) webCls.newInstance();
        } catch (Exception e) {
            mEasyOperator = new ModelWebOperator();
            e.printStackTrace();
        }
    }

    @Subscribe(sticky = true)
    public final void onEventMainThread(final ServiceBean eventBean) {
        if(eventBean==null)
            return;
        EventBus.getDefault().removeStickyEvent(eventBean);

        mH.post(new Runnable() {
            @Override
            public void run() {
                handleEvent(eventBean);
            }
        });
    }

    private void handleEvent(ServiceBean bean) {
        if(bean instanceof TitleServiceBean) {
            titleTv.setText(bean.obj1.toString());
        }else if(bean instanceof FinishServiceBean) {
            exit();
        }else if(bean instanceof BackkeyServiceBean) {
            boolean visable = (boolean) bean.obj1;
            if(visable) {
                titleTv.setVisibility(View.VISIBLE);
            }else {
                // 手机返回键可否点击
                backable = (boolean) bean.obj2;
                backView.setVisibility(View.INVISIBLE);
            }
        }else if(bean instanceof RemoteViewServiceBean) {
            RemoteViews remoteViews = (RemoteViews) bean.obj1;
            remoteViews.reapply(this, containerLayout);
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if(webView!=null) {
            webView.destory();
        }
        EventBus.getDefault().unregister(this);
        WebService.unRegisterOnWebListener(onWebListener);
        mH.removeCallbacksAndMessages(null);
    }

    /**
     * 由WebService调用 this Activity
     */
    private OnWebListener onWebListener = new OnWebListener() {
        @Override
        public void onLoadUrl(String url) {
            mH.obtainMessage(H.LOAD_URL, url).sendToTarget();
        }

        @Override
        public void onPostUrl(String url, byte[] bytes) {
            Message message = Message.obtain(mH, H.POST_URL);
            Bundle data = new Bundle();
            data.putString("url", url);
            data.putByteArray("bytes", bytes);
            message.setData(data);
            message.sendToTarget();
        }

        @Override
        public void onLoadData(String data, String mimeType, String encoding) {
            Message message = Message.obtain(mH, H.LOAD_DATA);
            Bundle bundle = new Bundle();
            bundle.putString("data", data);
            bundle.putString("mimeType", mimeType);
            bundle.putString("encoding", encoding);
            message.setData(bundle);
            message.sendToTarget();
        }
    };

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_DOWN) {
            if(backable) {
                exit();
            }
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }

    @Override
    public void onClick(View v) {
        if(v==backView) {
            if(webView.canGoback()) {
                mEasyOperator.onGoBack(this);
                webView.goBack();
            }else {
                exit();
            }
        }else if(v==closeView) {
            exit();
        }
    }

    private void exit() {
        if(mEasyOperator.onExit(this)) {
            finish();
        }
    }

    private void handleLoadUrl(String url) {
        webView.loadUrl(url);
    }

    public void handlePostUrl(String url, byte[] bytes) {
        webView.postUrl(url, bytes);
    }

    public void handleLoadData(String data, String mimeType, String encoding) {
        webView.loadData(data, mimeType, encoding);
    }

    /**
     * Binder调用webview在不同线程，需放在主线程中处理
     */
    private class H extends Handler {
        public static final int LOAD_URL = 100;
        public static final int LOAD_DATA = 101;
        public static final int POST_URL = 102;

        @Override
        public void handleMessage(Message msg) {
            Bundle data = null;
            switch (msg.what) {
                case LOAD_URL:
                    handleLoadUrl(msg.obj.toString());
                    break;
                case LOAD_DATA:
                    data = msg.getData();
                    handleLoadData(data.getString("data"), data.getString("mimeType"), data.getString("encoding"));
                    break;
                case POST_URL:
                    data = msg.getData();
                    handlePostUrl(data.getString("url"), data.getByteArray("bytes"));
                    break;
                default:break;
            }
        }
    }
}
