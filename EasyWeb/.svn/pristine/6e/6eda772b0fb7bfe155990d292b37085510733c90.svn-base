package com.xx.easyweb;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.os.RemoteException;
import android.widget.RemoteViews;

import com.xx.model.ServiceBean;
import com.xx.model.servicebean.BackkeyServiceBean;
import com.xx.model.servicebean.FinishServiceBean;
import com.xx.model.servicebean.LoadUrlServiceBean;
import com.xx.model.servicebean.RemoteViewServiceBean;
import com.xx.model.servicebean.TitleServiceBean;

import java.lang.reflect.Field;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Created by xievxin on 2017/11/8.
 */

public class WebService extends Service {

    public static AtomicInteger activityCount = new AtomicInteger();
    public static String easyOperatorClassName;

    @Override
    public IBinder onBind(final Intent intent) {
        return new IWeb.Stub() {

            private String webClassName;

            @Override
            public void setWebName(String webClassName) throws RemoteException {
                this.webClassName = webClassName;
            }

            @Override
            public void setEasyOperator(String clsName) throws RemoteException {
                easyOperatorClassName = clsName;
            }

            @Override
            public void loadUrl(String url) throws RemoteException {
                ServiceBean.obtain(LoadUrlServiceBean.class).setObj1(url).postSticky();

                if(activityCount.get()==0) {
                    Intent webIntent = new Intent(WebService.this, WebActivity.class);
                    webIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    webIntent.putExtra(WebActivity.WEB_CLASS_NAME, webClassName);
                    startActivity(webIntent);
                }


//                if(webMap.size()>0) {
//                    for(Iterator<OnWebListener> it=webMap.keySet().iterator();it.hasNext();) {
//                        it.next().onLoadUrl(url);
//                    }
//                }else {
//                    Intent webIntent = new Intent(WebService.this, WebActivity.class);
//                    webIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
//                    webIntent.putExtra(WebActivity.WEB_CLASS_NAME, webClassName);
//                    webIntent.putExtra("url", url);
//                    webIntent.putExtra(WebActivity.LOAD_TYPE, WebActivity.TYPE_LOAD_URL);
//                    startActivity(webIntent);
//                }
            }

            @Override
            public void postUrl(String url, byte[] bytes) throws RemoteException {
//                if(webMap.size()>0) {
//                    for(Iterator<OnWebListener> it=webMap.keySet().iterator();it.hasNext();) {
//                        it.next().onPostUrl(url, bytes);
//                    }
//                }else {
//                    Intent webIntent = new Intent(WebService.this, WebActivity.class);
//                    webIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
//                    webIntent.putExtra(WebActivity.WEB_CLASS_NAME, webClassName);
//                    webIntent.putExtra("url", url);
//                    webIntent.putExtra("bytes", bytes);
//                    webIntent.putExtra(WebActivity.LOAD_TYPE, WebActivity.TYPE_POST_URL);
//                    startActivity(webIntent);
//                }
            }

            @Override
            public void loadData(String data, String mimeType, String encoding) throws RemoteException {
//                if(webMap.size()>0) {
//                    for(Iterator<OnWebListener> it=webMap.keySet().iterator();it.hasNext();) {
//                        it.next().onLoadData(data, mimeType, encoding);
//                    }
//                }else {
//                    Intent webIntent = new Intent(WebService.this, WebActivity.class);
//                    webIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
//                    webIntent.putExtra(WebActivity.WEB_CLASS_NAME, webClassName);
//                    webIntent.putExtra("data", data);
//                    webIntent.putExtra("mimeType", mimeType);
//                    webIntent.putExtra("encoding", encoding);
//                    webIntent.putExtra(WebActivity.LOAD_TYPE, WebActivity.TYPE_LOAD_DATA);
//                    startActivity(webIntent);
//                }
            }

            @Override
            public void closeAll() throws RemoteException {
                ServiceBean.obtain(FinishServiceBean.class).post();
            }

            @Override
            public void setContent(RemoteViews remoteViews) throws RemoteException {
                ServiceBean.obtain(RemoteViewServiceBean.class).setObj1(remoteViews).postSticky();
            }

            @Override
            public void hideBackKey(boolean backable) throws RemoteException {
                ServiceBean.obtain(BackkeyServiceBean.class).setObj1(false).setObj2(backable).postSticky();
            }

            @Override
            public void showBackKey() throws RemoteException {
                ServiceBean.obtain(BackkeyServiceBean.class).setObj1(true).postSticky();
            }

            @Override
            public void setTitle(String title) throws RemoteException {
                ServiceBean.obtain(TitleServiceBean.class).setObj1(title).postSticky();
            }

            @Override
            public boolean setStaticString(String className, String fieldName, String value) throws RemoteException {
                return setValue(className, fieldName, value);
            }

            @Override
            public boolean setStaticBoolean(String className, String fieldName, boolean value) throws RemoteException {
                return setValue(className, fieldName, value);
            }

            @Override
            public boolean setStaticInteger(String className, String fieldName, int value) throws RemoteException {
                return setValue(className, fieldName, value);
            }

        };
    }

    private boolean setValue(String className, String fieldName, Object value) {
        try {
            Class cls = Class.forName(className);
            Field field = cls.getDeclaredField(fieldName);
            field.setAccessible(true);
            field.set(null, value);
            return true;
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }

        return false;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
    }
}
