/*
 * This file is auto-generated.  DO NOT MODIFY.
 * Original file: D:\\workspace\\EasyWeb\\easyweb\\src\\main\\aidl\\com\\xx\\easyweb\\IWeb.aidl
 */
package com.xx.easyweb;
// Declare any non-default types here with import statements

public interface IWeb extends android.os.IInterface
{
/** Local-side IPC implementation stub class. */
public static abstract class Stub extends android.os.Binder implements com.xx.easyweb.IWeb
{
private static final java.lang.String DESCRIPTOR = "com.xx.easyweb.IWeb";
/** Construct the stub at attach it to the interface. */
public Stub()
{
this.attachInterface(this, DESCRIPTOR);
}
/**
 * Cast an IBinder object into an com.xx.easyweb.IWeb interface,
 * generating a proxy if needed.
 */
public static com.xx.easyweb.IWeb asInterface(android.os.IBinder obj)
{
if ((obj==null)) {
return null;
}
android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
if (((iin!=null)&&(iin instanceof com.xx.easyweb.IWeb))) {
return ((com.xx.easyweb.IWeb)iin);
}
return new com.xx.easyweb.IWeb.Stub.Proxy(obj);
}
@Override public android.os.IBinder asBinder()
{
return this;
}
@Override public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException
{
switch (code)
{
case INTERFACE_TRANSACTION:
{
reply.writeString(DESCRIPTOR);
return true;
}
case TRANSACTION_setWebName:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.setWebName(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setEasyOperator:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.setEasyOperator(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_loadUrl:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.loadUrl(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_postUrl:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
byte[] _arg1;
_arg1 = data.createByteArray();
this.postUrl(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_loadData:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
java.lang.String _arg1;
_arg1 = data.readString();
java.lang.String _arg2;
_arg2 = data.readString();
this.loadData(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_closeAll:
{
data.enforceInterface(DESCRIPTOR);
this.closeAll();
reply.writeNoException();
return true;
}
case TRANSACTION_setContent:
{
data.enforceInterface(DESCRIPTOR);
android.widget.RemoteViews _arg0;
if ((0!=data.readInt())) {
_arg0 = android.widget.RemoteViews.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
this.setContent(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_hideBackKey:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
this.hideBackKey(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_showBackKey:
{
data.enforceInterface(DESCRIPTOR);
this.showBackKey();
reply.writeNoException();
return true;
}
case TRANSACTION_setTitle:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.setTitle(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setStaticString:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
java.lang.String _arg1;
_arg1 = data.readString();
java.lang.String _arg2;
_arg2 = data.readString();
boolean _result = this.setStaticString(_arg0, _arg1, _arg2);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_setStaticBoolean:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
java.lang.String _arg1;
_arg1 = data.readString();
boolean _arg2;
_arg2 = (0!=data.readInt());
boolean _result = this.setStaticBoolean(_arg0, _arg1, _arg2);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_setStaticInteger:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
java.lang.String _arg1;
_arg1 = data.readString();
int _arg2;
_arg2 = data.readInt();
boolean _result = this.setStaticInteger(_arg0, _arg1, _arg2);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
}
return super.onTransact(code, data, reply, flags);
}
private static class Proxy implements com.xx.easyweb.IWeb
{
private android.os.IBinder mRemote;
Proxy(android.os.IBinder remote)
{
mRemote = remote;
}
@Override public android.os.IBinder asBinder()
{
return mRemote;
}
public java.lang.String getInterfaceDescriptor()
{
return DESCRIPTOR;
}
@Override public void setWebName(java.lang.String clsName) throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(clsName);
mRemote.transact(Stub.TRANSACTION_setWebName, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
/**
     * 是否设置成功，内部匿名类可能反射失败
     * @param clsName
     */
@Override public void setEasyOperator(java.lang.String clsName) throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(clsName);
mRemote.transact(Stub.TRANSACTION_setEasyOperator, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
@Override public void loadUrl(java.lang.String url) throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(url);
mRemote.transact(Stub.TRANSACTION_loadUrl, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
@Override public void postUrl(java.lang.String url, byte[] bytes) throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(url);
_data.writeByteArray(bytes);
mRemote.transact(Stub.TRANSACTION_postUrl, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
@Override public void loadData(java.lang.String data, java.lang.String mimeType, java.lang.String encoding) throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(data);
_data.writeString(mimeType);
_data.writeString(encoding);
mRemote.transact(Stub.TRANSACTION_loadData, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
@Override public void closeAll() throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
mRemote.transact(Stub.TRANSACTION_closeAll, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
@Override public void setContent(android.widget.RemoteViews remoteViews) throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
if ((remoteViews!=null)) {
_data.writeInt(1);
remoteViews.writeToParcel(_data, 0);
}
else {
_data.writeInt(0);
}
mRemote.transact(Stub.TRANSACTION_setContent, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
/**
     * 隐藏左上角backKey
     * @param backable 手机返回键是否可点
     */
@Override public void hideBackKey(boolean backable) throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeInt(((backable)?(1):(0)));
mRemote.transact(Stub.TRANSACTION_hideBackKey, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
@Override public void showBackKey() throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
mRemote.transact(Stub.TRANSACTION_showBackKey, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
@Override public void setTitle(java.lang.String title) throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(title);
mRemote.transact(Stub.TRANSACTION_setTitle, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
/**
     * 重复赋值static
     */
@Override public boolean setStaticString(java.lang.String className, java.lang.String fieldName, java.lang.String value) throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
boolean _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(className);
_data.writeString(fieldName);
_data.writeString(value);
mRemote.transact(Stub.TRANSACTION_setStaticString, _data, _reply, 0);
_reply.readException();
_result = (0!=_reply.readInt());
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
}
/**
     * 重复赋值static
     */
@Override public boolean setStaticBoolean(java.lang.String className, java.lang.String fieldName, boolean value) throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
boolean _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(className);
_data.writeString(fieldName);
_data.writeInt(((value)?(1):(0)));
mRemote.transact(Stub.TRANSACTION_setStaticBoolean, _data, _reply, 0);
_reply.readException();
_result = (0!=_reply.readInt());
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
}
/**
     * 重复赋值static
     */
@Override public boolean setStaticInteger(java.lang.String className, java.lang.String fieldName, int value) throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
boolean _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(className);
_data.writeString(fieldName);
_data.writeInt(value);
mRemote.transact(Stub.TRANSACTION_setStaticInteger, _data, _reply, 0);
_reply.readException();
_result = (0!=_reply.readInt());
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
}
}
static final int TRANSACTION_setWebName = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);
static final int TRANSACTION_setEasyOperator = (android.os.IBinder.FIRST_CALL_TRANSACTION + 1);
static final int TRANSACTION_loadUrl = (android.os.IBinder.FIRST_CALL_TRANSACTION + 2);
static final int TRANSACTION_postUrl = (android.os.IBinder.FIRST_CALL_TRANSACTION + 3);
static final int TRANSACTION_loadData = (android.os.IBinder.FIRST_CALL_TRANSACTION + 4);
static final int TRANSACTION_closeAll = (android.os.IBinder.FIRST_CALL_TRANSACTION + 5);
static final int TRANSACTION_setContent = (android.os.IBinder.FIRST_CALL_TRANSACTION + 6);
static final int TRANSACTION_hideBackKey = (android.os.IBinder.FIRST_CALL_TRANSACTION + 7);
static final int TRANSACTION_showBackKey = (android.os.IBinder.FIRST_CALL_TRANSACTION + 8);
static final int TRANSACTION_setTitle = (android.os.IBinder.FIRST_CALL_TRANSACTION + 9);
static final int TRANSACTION_setStaticString = (android.os.IBinder.FIRST_CALL_TRANSACTION + 10);
static final int TRANSACTION_setStaticBoolean = (android.os.IBinder.FIRST_CALL_TRANSACTION + 11);
static final int TRANSACTION_setStaticInteger = (android.os.IBinder.FIRST_CALL_TRANSACTION + 12);
}
public void setWebName(java.lang.String clsName) throws android.os.RemoteException;
/**
     * 是否设置成功，内部匿名类可能反射失败
     * @param clsName
     */
public void setEasyOperator(java.lang.String clsName) throws android.os.RemoteException;
public void loadUrl(java.lang.String url) throws android.os.RemoteException;
public void postUrl(java.lang.String url, byte[] bytes) throws android.os.RemoteException;
public void loadData(java.lang.String data, java.lang.String mimeType, java.lang.String encoding) throws android.os.RemoteException;
public void closeAll() throws android.os.RemoteException;
public void setContent(android.widget.RemoteViews remoteViews) throws android.os.RemoteException;
/**
     * 隐藏左上角backKey
     * @param backable 手机返回键是否可点
     */
public void hideBackKey(boolean backable) throws android.os.RemoteException;
public void showBackKey() throws android.os.RemoteException;
public void setTitle(java.lang.String title) throws android.os.RemoteException;
/**
     * 重复赋值static
     */
public boolean setStaticString(java.lang.String className, java.lang.String fieldName, java.lang.String value) throws android.os.RemoteException;
/**
     * 重复赋值static
     */
public boolean setStaticBoolean(java.lang.String className, java.lang.String fieldName, boolean value) throws android.os.RemoteException;
/**
     * 重复赋值static
     */
public boolean setStaticInteger(java.lang.String className, java.lang.String fieldName, int value) throws android.os.RemoteException;
}
